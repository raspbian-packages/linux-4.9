commit 5118232bd81ca8fdba37184f59c19be18be4ca32
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed May 31 17:42:36 2017 +0200

    drm/i915: Always recompute watermarks when distrust_bios_wm is set, v2.
    
    commit 4e3aed844547f63614363a386de126e6304e55fb upstream.
    
    On some systems there can be a race condition in which no crtc state is
    added to the first atomic commit. This results in all crtc's having a
    null DDB allocation, causing a FIFO underrun on any update until the
    first modeset.
    
    Changes since v1:
    - Do not take the connection_mutex, this is already done below.
    
    Reported-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Inspired-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: 98d39494d375 ("drm/i915/gen9: Compute DDB allocation at atomic
    check time (v4)")
    Cc: Mahesh Kumar <mahesh1.kumar@intel.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170531154236.27180-1-maarten.lankhorst@linux.intel.com
    Reviewed-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    (cherry picked from commit 367d73d2806085bb507ab44c1f532640917fd5ca)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 2c6d59d..49de476 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -4114,11 +4114,19 @@ skl_compute_wm(struct drm_atomic_state *state)
 	struct drm_crtc_state *cstate;
 	struct intel_atomic_state *intel_state = to_intel_atomic_state(state);
 	struct skl_wm_values *results = &intel_state->wm_results;
+	struct drm_device *dev = state->dev;
 	struct skl_pipe_wm *pipe_wm;
 	bool changed = false;
 	int ret, i;
 
 	/*
+	 * When we distrust bios wm we always need to recompute to set the
+	 * expected DDB allocations for each CRTC.
+	 */
+	if (to_i915(dev)->wm.distrust_bios_wm)
+		changed = true;
+
+	/*
 	 * If this transaction isn't actually touching any CRTC's, don't
 	 * bother with watermark calculation.  Note that if we pass this
 	 * test, we're guaranteed to hold at least one CRTC state mutex,
@@ -4128,6 +4136,7 @@ skl_compute_wm(struct drm_atomic_state *state)
 	 */
 	for_each_crtc_in_state(state, crtc, cstate, i)
 		changed = true;
+
 	if (!changed)
 		return 0;
 
