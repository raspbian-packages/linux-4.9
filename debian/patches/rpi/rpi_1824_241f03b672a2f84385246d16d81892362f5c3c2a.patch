commit 241f03b672a2f84385246d16d81892362f5c3c2a
Author: Colin King <colin.king@canonical.com>
Date:   Wed Jan 11 11:43:10 2017 +0000

    perf/x86/intel: Use ULL constant to prevent undefined shift behaviour
    
    
    [ Upstream commit ad5013d5699d30ded0cdbbc68b93b2aa28222c6e ]
    
    When x86_pmu.num_counters is 32 the shift of the integer constant 1 is
    exceeding 32bit and therefor undefined behaviour.
    
    Fix this by shifting 1ULL instead of 1.
    
    Reported-by: CoverityScan CID#1192105 ("Bad bit shift operation")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Kan Liang <kan.liang@intel.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: http://lkml.kernel.org/r/20170111114310.17928-1-colin.king@canonical.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/x86/events/intel/core.c b/arch/x86/events/intel/core.c
index 24a6cd2..f0f197f 100644
--- a/arch/x86/events/intel/core.c
+++ b/arch/x86/events/intel/core.c
@@ -3978,7 +3978,7 @@ __init int intel_pmu_init(void)
 		     x86_pmu.num_counters, INTEL_PMC_MAX_GENERIC);
 		x86_pmu.num_counters = INTEL_PMC_MAX_GENERIC;
 	}
-	x86_pmu.intel_ctrl = (1 << x86_pmu.num_counters) - 1;
+	x86_pmu.intel_ctrl = (1ULL << x86_pmu.num_counters) - 1;
 
 	if (x86_pmu.num_counters_fixed > INTEL_PMC_MAX_FIXED) {
 		WARN(1, KERN_ERR "hw perf events fixed %d > max(%d), clipping!",
