commit a4c5e4318a853830f35f9e19ceaa900cd8ea2e07
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Fri Jun 16 16:44:34 2017 +0300

    locking/rwsem-spinlock: Fix EINTR branch in __down_write_common()
    
    commit a0c4acd2c220376b4e9690e75782d0c0afdaab9f upstream.
    
    If a writer could been woken up, the above branch
    
    	if (sem->count == 0)
    		break;
    
    would have moved us to taking the sem. So, it's
    not the time to wake a writer now, and only readers
    are allowed now. Thus, 0 must be passed to __rwsem_do_wake().
    
    Next, __rwsem_do_wake() wakes readers unconditionally.
    But we mustn't do that if the sem is owned by writer
    in the moment. Otherwise, writer and reader own the sem
    the same time, which leads to memory corruption in
    callers.
    
    rwsem-xadd.c does not need that, as:
    
      1) the similar check is made lockless there,
      2) in __rwsem_mark_wake::try_reader_grant we test,
    
    that sem is not owned by writer.
    
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Niklas Cassel <niklas.cassel@axis.com>
    Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 17fcbd590d0c "locking/rwsem: Fix down_write_killable() for CONFIG_RWSEM_GENERIC_SPINLOCK=y"
    Link: http://lkml.kernel.org/r/149762063282.19811.9129615532201147826.stgit@localhost.localdomain
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/locking/rwsem-spinlock.c b/kernel/locking/rwsem-spinlock.c
index 2bef4ab..a608f7a 100644
--- a/kernel/locking/rwsem-spinlock.c
+++ b/kernel/locking/rwsem-spinlock.c
@@ -233,8 +233,8 @@ int __sched __down_write_common(struct rw_semaphore *sem, int state)
 
 out_nolock:
 	list_del(&waiter.list);
-	if (!list_empty(&sem->wait_list))
-		__rwsem_do_wake(sem, 1);
+	if (!list_empty(&sem->wait_list) && sem->count >= 0)
+		__rwsem_do_wake(sem, 0);
 	raw_spin_unlock_irqrestore(&sem->wait_lock, flags);
 
 	return -EINTR;
