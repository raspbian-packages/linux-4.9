From: Ben Hutchings <ben@decadent.org.uk>
Date: Tue, 11 Dec 2018 22:50:05 +0000
Subject: posix-timers: Avoid ABI change in 4.9.136
Forwarded: not-needed

Commit 65cb24de03f1 "posix-timers: Sanitize overrun handling" changes
the types of k_itimer::it_overrun{,_last} from int to s64.

The k_itimer structure is always allocated by built-in code and these
members are only used by built-in code.  So move them to the end and
put padding in their original place so all other member offsets stay
the same.  Hide the changes from genksyms.  Also hide them when
building modules, to make sure they really don't use them.

---
--- a/include/linux/posix-timers.h
+++ b/include/linux/posix-timers.h
@@ -65,8 +65,13 @@ struct k_itimer {
 	spinlock_t it_lock;
 	clockid_t it_clock;		/* which timer type */
 	timer_t it_id;			/* timer id */
-	s64 it_overrun;			/* overrun on pending signal  */
-	s64 it_overrun_last;		/* overrun on last delivered signal */
+#ifndef __GENKSYMS__
+	int pad_was_it_overrun;
+	int pad_was_it_overrun_last;
+#else
+	int it_overrun;
+	int it_overrun_last;
+#endif
 	int it_requeue_pending;		/* waiting to requeue this timer */
 #define REQUEUE_PENDING 1
 	int it_sigev_notify;		/* notify word of sigevent struct */
@@ -94,6 +99,10 @@ struct k_itimer {
 		} alarm;
 		struct rcu_head rcu;
 	} it;
+#if !defined(__GENKSYMS__) && !defined(MODULE)
+	s64 it_overrun;			/* overrun on pending signal  */
+	s64 it_overrun_last;		/* overrun on last delivered signal */
+#endif
 };
 
 struct k_clock {
