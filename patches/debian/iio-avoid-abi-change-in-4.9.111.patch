From: Ben Hutchings <ben@decadent.org.uk>
Date: Sun, 26 Aug 2018 21:49:56 +0100
Subject: iio: Avoid ABI change in 4.9.111
Forwarded: not-needed

Commit c043ec1ca5ba "iio:buffer: make length types match kfifo types"
changed the types of iio_buffer size fields and a related operation,
to avoid the possibility of negative (invaid) values.

To avoid an ABI change, revert the core type changes and add explicit
checks for negative values before updating the members of iio_buffer.

---
--- a/drivers/iio/buffer/kfifo_buf.c
+++ b/drivers/iio/buffer/kfifo_buf.c
@@ -71,7 +72,7 @@ static int iio_set_bytes_per_datum_kfifo
 	return 0;
 }
 
-static int iio_set_length_kfifo(struct iio_buffer *r, unsigned int length)
+static int iio_set_length_kfifo(struct iio_buffer *r, int length)
 {
 	/* Avoid an invalid state */
 	if (length < 2)
--- a/drivers/iio/industrialio-buffer.c
+++ b/drivers/iio/industrialio-buffer.c
@@ -498,6 +498,9 @@ static ssize_t iio_buffer_write_length(s
 	if (val == buffer->length)
 		return len;
 
+	if (val > INT_MAX)
+		return -EINVAL;
+
 	mutex_lock(&indio_dev->mlock);
 	if (iio_buffer_is_active(indio_dev->buffer)) {
 		ret = -EBUSY;
@@ -603,18 +606,20 @@ static int iio_buffer_disable(struct iio
 	return buffer->access->disable(buffer, indio_dev);
 }
 
-static void iio_buffer_update_bytes_per_datum(struct iio_dev *indio_dev,
+static int iio_buffer_update_bytes_per_datum(struct iio_dev *indio_dev,
 	struct iio_buffer *buffer)
 {
 	unsigned int bytes;
 
 	if (!buffer->access->set_bytes_per_datum)
-		return;
+		return 0;
 
 	bytes = iio_compute_scan_bytes(indio_dev, buffer->scan_mask,
 		buffer->scan_timestamp);
+	if (bytes > INT_MAX)
+		return -EINVAL;
 
-	buffer->access->set_bytes_per_datum(buffer, bytes);
+	return buffer->access->set_bytes_per_datum(buffer, bytes);
 }
 
 static int iio_buffer_request_update(struct iio_dev *indio_dev,
@@ -622,15 +627,14 @@ static int iio_buffer_request_update(str
 {
 	int ret;
 
-	iio_buffer_update_bytes_per_datum(indio_dev, buffer);
-	if (buffer->access->request_update) {
+	ret = iio_buffer_update_bytes_per_datum(indio_dev, buffer);
+	if (ret == 0 && buffer->access->request_update)
 		ret = buffer->access->request_update(buffer);
-		if (ret) {
-			dev_dbg(&indio_dev->dev,
-			       "Buffer not started: buffer parameter update failed (%d)\n",
-				ret);
-			return ret;
-		}
+	if (ret) {
+		dev_dbg(&indio_dev->dev,
+			"Buffer not started: buffer parameter update failed (%d)\n",
+			ret);
+		return ret;
 	}
 
 	return 0;
--- a/include/linux/iio/buffer.h
+++ b/include/linux/iio/buffer.h
@@ -61,7 +61,7 @@ struct iio_buffer_access_funcs {
 	int (*request_update)(struct iio_buffer *buffer);
 
 	int (*set_bytes_per_datum)(struct iio_buffer *buffer, size_t bpd);
-	int (*set_length)(struct iio_buffer *buffer, unsigned int length);
+	int (*set_length)(struct iio_buffer *buffer, int length);
 
 	int (*enable)(struct iio_buffer *buffer, struct iio_dev *indio_dev);
 	int (*disable)(struct iio_buffer *buffer, struct iio_dev *indio_dev);
@@ -96,8 +96,8 @@ struct iio_buffer_access_funcs {
  * @watermark:		[INTERN] number of datums to wait for poll/read.
  */
 struct iio_buffer {
-	unsigned int				length;
-	size_t					bytes_per_datum;
+	int					length;
+	int					bytes_per_datum;
 	struct attribute_group			*scan_el_attrs;
 	long					*scan_mask;
 	bool					scan_timestamp;
