From: Ben Hutchings <ben@decadent.org.uk>
Date: Sun, 26 Aug 2018 21:41:26 +0100
Subject: arm64: cpucaps: Avoid ABI changes in 4.9.114
Forwarded: not-needed

Commit 68240e9bb16d "arm64: KVM: Add ARCH_WORKAROUND_2 support for
guests" added another bit to cpu_hwcaps (but didn't actually change
its size) and another element to cpu_hwcap_keys.

New modules can safely access the extra bit in cpu_hwcaps on old
kernels.  But add a BUILD_BUG_ON() to check that it doesn't grow
into another word.

New modules can't safely access the extra element in cpu_hwcap_keys.
However, only the inline function __cpus_have_const_cap() seems to
access it.  Change it to use cpu_hwcaps instead, when it's used in a
module to query a new capability.

---
--- a/arch/arm64/include/asm/cpufeature.h
+++ b/arch/arm64/include/asm/cpufeature.h
@@ -94,8 +94,13 @@ struct arm64_cpu_capabilities {
 	};
 };
 
+#ifndef __GENKSYMS__
 extern DECLARE_BITMAP(cpu_hwcaps, ARM64_NCAPS);
 extern struct static_key_false cpu_hwcap_keys[ARM64_NCAPS];
+#else
+extern DECLARE_BITMAP(cpu_hwcaps, 18);
+extern struct static_key_false cpu_hwcap_keys[18];
+#endif
 extern struct static_key_false arm64_const_caps_ready;
 
 bool this_cpu_has_cap(unsigned int cap);
@@ -110,11 +115,17 @@ static inline bool __cpus_have_const_cap
 {
 	if (num >= ARM64_NCAPS)
 		return false;
+#ifdef MODULE
+	/* cpu_hwcap_keys might be as small as 18 elements */
+	if (num >= 18)
+		return test_bit(num, cpu_hwcaps);
+#endif
 	return static_branch_unlikely(&cpu_hwcap_keys[num]);
 }
 
 static inline bool cpus_have_cap(unsigned int num)
 {
+	BUILD_BUG_ON(BITS_TO_LONGS(ARM64_NCAPS) != BITS_TO_LONGS(18));
 	if (num >= ARM64_NCAPS)
 		return false;
 	return test_bit(num, cpu_hwcaps);
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@ -46,10 +46,18 @@ unsigned int compat_elf_hwcap __read_mos
 unsigned int compat_elf_hwcap2 __read_mostly;
 #endif
 
+#ifndef __GENKSYMS__
 DECLARE_BITMAP(cpu_hwcaps, ARM64_NCAPS);
+#else
+DECLARE_BITMAP(cpu_hwcaps, 18);
+#endif
 EXPORT_SYMBOL(cpu_hwcaps);
 
+#ifndef __GENKSYMS__
 DEFINE_STATIC_KEY_ARRAY_FALSE(cpu_hwcap_keys, ARM64_NCAPS);
+#else
+DEFINE_STATIC_KEY_ARRAY_FALSE(cpu_hwcap_keys, 18);
+#endif
 EXPORT_SYMBOL(cpu_hwcap_keys);
 
 #define __ARM64_FTR_BITS(SIGNED, STRICT, TYPE, SHIFT, WIDTH, SAFE_VAL) \
