From: Ben Hutchings <ben@decadent.org.uk>
Date: Tue, 11 Dec 2018 18:40:23 +0000
Subject: reset: Avoid ABI changes in 4.9.144
Forwarded: not-needed

Commit ca58e3b2fc54 "reset: make optional functions really optional"
added an extra parameter to the __of_reset_control_get() and
__devm_reset_control_get() functions.  Rename these functions with a
suffix "_5" (for 5 parameters) and add back the old functions as
wrappers around them.  Use macros to ensure the new functions are used
by newly built code.

Commit f10a9deb22ee "reset: make device_reset_optional() really
optional" changed device_reset() from an extern exported function
(when CONFIG_RESET_CONTROLLER is enabled) to a static inline wrapper.
Keep it as a wrapper but change it back to an extern exported
function.

---
--- a/drivers/reset/core.c
+++ b/drivers/reset/core.c
@@ -287,7 +287,7 @@ static void __reset_control_put_internal
 	kfree(rstc);
 }
 
-struct reset_control *__of_reset_control_get(struct device_node *node,
+struct reset_control *__of_reset_control_get_5(struct device_node *node,
 				     const char *id, int index, bool shared,
 				     bool optional)
 {
@@ -349,7 +349,7 @@ struct reset_control *__of_reset_control
 
 	return rstc;
 }
-EXPORT_SYMBOL_GPL(__of_reset_control_get);
+EXPORT_SYMBOL_GPL(__of_reset_control_get_5);
 
 struct reset_control *__reset_control_get(struct device *dev, const char *id,
 					  int index, bool shared, bool optional)
@@ -362,6 +362,14 @@ struct reset_control *__reset_control_ge
 }
 EXPORT_SYMBOL_GPL(__reset_control_get);
 
+#undef __of_reset_control_get
+struct reset_control *__of_reset_control_get(struct device_node *node,
+				     const char *id, int index, int shared)
+{
+	return __of_reset_control_get_5(node, id, index, shared, false);
+}
+EXPORT_SYMBOL_GPL(__of_reset_control_get);
+
 /**
  * reset_control_put - free the reset controller
  * @rstc: reset controller
@@ -383,7 +391,7 @@ static void devm_reset_control_release(s
 	reset_control_put(*(struct reset_control **)res);
 }
 
-struct reset_control *__devm_reset_control_get(struct device *dev,
+struct reset_control *__devm_reset_control_get_5(struct device *dev,
 				     const char *id, int index, bool shared,
 				     bool optional)
 {
@@ -404,6 +412,14 @@ struct reset_control *__devm_reset_contr
 
 	return rstc;
 }
+EXPORT_SYMBOL_GPL(__devm_reset_control_get_5);
+
+#undef __devm_reset_control_get
+struct reset_control *__devm_reset_control_get(struct device *dev,
+				     const char *id, int index, int shared)
+{
+	return __devm_reset_control_get_5(dev, id, index, shared, false);
+}
 EXPORT_SYMBOL_GPL(__devm_reset_control_get);
 
 /**
@@ -432,3 +448,9 @@ int __device_reset(struct device *dev, b
 	return ret;
 }
 EXPORT_SYMBOL_GPL(__device_reset);
+
+int __must_check device_reset(struct device *dev)
+{
+	return __device_reset(dev, false);
+}
+EXPORT_SYMBOL_GPL(device_reset);
--- a/include/linux/reset.h
+++ b/include/linux/reset.h
@@ -13,16 +13,23 @@ int reset_control_deassert(struct reset_
 int reset_control_status(struct reset_control *rstc);
 
 struct reset_control *__of_reset_control_get(struct device_node *node,
+				     const char *id, int index, int shared);
+struct reset_control *__of_reset_control_get_5(struct device_node *node,
 				     const char *id, int index, bool shared,
 				     bool optional);
+#define __of_reset_control_get __of_reset_control_get_5
 struct reset_control *__reset_control_get(struct device *dev, const char *id,
 					  int index, bool shared,
 					  bool optional);
 void reset_control_put(struct reset_control *rstc);
 int __device_reset(struct device *dev, bool optional);
+int __must_check device_reset(struct device *dev);
 struct reset_control *__devm_reset_control_get(struct device *dev,
+				     const char *id, int index, int shared);
+struct reset_control *__devm_reset_control_get_5(struct device *dev,
 				     const char *id, int index, bool shared,
 				     bool optional);
+#define __devm_reset_control_get __devm_reset_control_get_5
 
 #else
 
@@ -55,6 +62,11 @@ static inline int __device_reset(struct
 	return optional ? 0 : -ENOTSUPP;
 }
 
+static inline int __must_check device_reset(struct device *dev)
+{
+	return __device_reset(dev, false);
+}
+
 static inline struct reset_control *__of_reset_control_get(
 					struct device_node *node,
 					const char *id, int index, bool shared,
@@ -79,11 +91,6 @@ static inline struct reset_control *__de
 
 #endif /* CONFIG_RESET_CONTROLLER */
 
-static inline int __must_check device_reset(struct device *dev)
-{
-	return __device_reset(dev, false);
-}
-
 static inline int device_reset_optional(struct device *dev)
 {
 	return __device_reset(dev, true);
