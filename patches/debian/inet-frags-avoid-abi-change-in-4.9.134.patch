From: Ben Hutchings <ben@decadent.org.uk>
Date: Mon, 29 Oct 2018 00:56:53 +0000
Subject: inet: frags: Avoid ABI change in 4.9.134
Forwarded: not-needed

Commits 2ffb1c363dfa "inet: frags: add a pointer to struct netns_frags"
and 23ce9c5ce704 "inet: frags: use rhashtables for reassembly units"
added new members to struct netns_frags, which is embedded in several
other structures that in turn are embedded in struct net_namespace.
This causes a real ABI change for a huge amount of networking code.

Move the new fields into a separate structure (struct netns_frags_ext)
and add the necessary instances of this at the end of struct
net_namespace.  Hide those from genksyms.  Change inet_frag APIs to
take an additional parameter pointing to this structure where needed.

[carnil: Update for context changes in 4.9.139 due to upstream commit
eb18330f4d7a ("inet: frags: better deal with smp races")]
[carnil: Update for context changes in 4.9.142 due to upstream commit
a49f03472b50 ("net: ieee802154: 6lowpan: fix frag reassembly")]
---
--- a/include/net/inet_frag.h
+++ b/include/net/inet_frag.h
@@ -1,11 +1,11 @@
 #ifndef __NET_FRAG_H__
 #define __NET_FRAG_H__
 
+#ifndef __GENKSYMS__
 #include <linux/rhashtable.h>
+#endif
 
 struct netns_frags {
-	struct rhashtable       rhashtable ____cacheline_aligned_in_smp;
-
 	/* Keep atomic mem on separate cachelines in structs that include it */
 	atomic_t		mem ____cacheline_aligned_in_smp;
 	/* sysctls */
@@ -13,7 +13,11 @@ struct netns_frags {
 	int			high_thresh;
 	int			low_thresh;
 	int			max_dist;
+};
+
+struct netns_frags_ext {
 	struct inet_frags	*f;
+	struct rhashtable       rhashtable ____cacheline_aligned_in_smp;
 };
 
 /**
@@ -85,6 +89,7 @@ struct inet_frag_queue {
 	__u8			flags;
 	u16			max_size;
 	struct netns_frags      *net;
+	struct netns_frags_ext	*net_ext;
 	struct rcu_head		rcu;
 };
 
@@ -103,16 +108,19 @@ struct inet_frags {
 int inet_frags_init(struct inet_frags *);
 void inet_frags_fini(struct inet_frags *);
 
-static inline int inet_frags_init_net(struct netns_frags *nf)
+static inline int inet_frags_init_net(struct netns_frags *nf,
+				      struct netns_frags_ext *nf_ext)
 {
 	atomic_set(&nf->mem, 0);
-	return rhashtable_init(&nf->rhashtable, &nf->f->rhash_params);
+	return rhashtable_init(&nf_ext->rhashtable, &nf_ext->f->rhash_params);
 }
-void inet_frags_exit_net(struct netns_frags *nf);
+void inet_frags_exit_net(struct netns_frags *nf, struct netns_frags_ext *ext);
 
 void inet_frag_kill(struct inet_frag_queue *q);
 void inet_frag_destroy(struct inet_frag_queue *q);
-struct inet_frag_queue *inet_frag_find(struct netns_frags *nf, void *key);
+struct inet_frag_queue *inet_frag_find(struct netns_frags *nf,
+				       struct netns_frags_ext *nf_ext,
+				       void *key);
 
 /* Free all skbs in the queue; return the sum of their truesizes. */
 unsigned int inet_frag_rbtree_purge(struct rb_root *root);
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -143,6 +143,18 @@ struct net {
 #endif
 	struct sock		*diag_nlsk;
 	atomic_t		fnhe_genid;
+#ifndef __GENKSYMS__
+	struct netns_frags_ext	ipv4_frags_ext;
+#if IS_ENABLED(CONFIG_IPV6)
+	struct netns_frags_ext	ipv6_frags_ext;
+#endif
+#if IS_ENABLED(CONFIG_IEEE802154_6LOWPAN)
+	struct netns_frags_ext	ieee802154_lowpan_frags_ext;
+#endif
+#if IS_ENABLED(CONFIG_NF_DEFRAG_IPV6)
+	struct netns_frags_ext	nf_frag_frags_ext;
+#endif
+#endif
 };
 
 #include <linux/seq_file_net.h>
--- a/net/ipv4/inet_fragment.c
+++ b/net/ipv4/inet_fragment.c
@@ -88,11 +88,12 @@ static void inet_frags_free_cb(void *ptr
 	inet_frag_put(fq);
 }
 
-void inet_frags_exit_net(struct netns_frags *nf)
+void inet_frags_exit_net(struct netns_frags *nf, struct netns_frags_ext *nf_ext)
 {
 	nf->low_thresh = 0; /* prevent creation of new frags */
 
-	rhashtable_free_and_destroy(&nf->rhashtable, inet_frags_free_cb, NULL);
+	rhashtable_free_and_destroy(&nf_ext->rhashtable, inet_frags_free_cb,
+				    NULL);
 }
 EXPORT_SYMBOL(inet_frags_exit_net);
 
@@ -102,10 +103,11 @@ void inet_frag_kill(struct inet_frag_que
 		atomic_dec(&fq->refcnt);
 
 	if (!(fq->flags & INET_FRAG_COMPLETE)) {
-		struct netns_frags *nf = fq->net;
+		struct netns_frags_ext *nf_ext = fq->net_ext;
 
 		fq->flags |= INET_FRAG_COMPLETE;
-		rhashtable_remove_fast(&nf->rhashtable, &fq->node, nf->f->rhash_params);
+		rhashtable_remove_fast(&nf_ext->rhashtable, &fq->node,
+				       nf_ext->f->rhash_params);
 		atomic_dec(&fq->refcnt);
 	}
 }
@@ -115,7 +117,7 @@ static void inet_frag_destroy_rcu(struct
 {
 	struct inet_frag_queue *q = container_of(head, struct inet_frag_queue,
 						 rcu);
-	struct inet_frags *f = q->net->f;
+	struct inet_frags *f = q->net_ext->f;
 
 	if (f->destructor)
 		f->destructor(q);
@@ -135,7 +137,7 @@ void inet_frag_destroy(struct inet_frag_
 	/* Release all fragment data. */
 	fp = q->fragments;
 	nf = q->net;
-	f = nf->f;
+	f = q->net_ext->f;
 	if (fp) {
 		do {
 			struct sk_buff *xp = fp->next;
@@ -156,9 +158,10 @@ void inet_frag_destroy(struct inet_frag_
 EXPORT_SYMBOL(inet_frag_destroy);
 
 static struct inet_frag_queue *inet_frag_alloc(struct netns_frags *nf,
-					       struct inet_frags *f,
+					       struct netns_frags_ext *nf_ext,
 					       void *arg)
 {
+	struct inet_frags *f = nf_ext->f;
 	struct inet_frag_queue *q;
 
 	if (!nf->high_thresh || frag_mem_limit(nf) > nf->high_thresh)
@@ -169,6 +172,7 @@ static struct inet_frag_queue *inet_frag
 		return NULL;
 
 	q->net = nf;
+	q->net_ext = nf_ext;
 	f->constructor(q, arg);
 	add_frag_mem_limit(nf, f->qsize);
 
@@ -180,21 +184,21 @@ static struct inet_frag_queue *inet_frag
 }
 
 static struct inet_frag_queue *inet_frag_create(struct netns_frags *nf,
+						struct netns_frags_ext *nf_ext,
 						void *arg,
 						struct inet_frag_queue **prev)
 {
-	struct inet_frags *f = nf->f;
 	struct inet_frag_queue *q;
 
-	q = inet_frag_alloc(nf, f, arg);
+	q = inet_frag_alloc(nf, nf_ext, arg);
 	if (!q) {
 		*prev = ERR_PTR(-ENOMEM);
 		return NULL;
 	}
 	mod_timer(&q->timer, jiffies + nf->timeout);
 
-	*prev = rhashtable_lookup_get_insert_key(&nf->rhashtable, &q->key,
-						 &q->node, f->rhash_params);
+	*prev = rhashtable_lookup_get_insert_key(&nf_ext->rhashtable, &q->key,
+						 &q->node, nf_ext->f->rhash_params);
 	if (*prev) {
 		q->flags |= INET_FRAG_COMPLETE;
 		inet_frag_kill(q);
@@ -206,14 +210,17 @@ static struct inet_frag_queue *inet_frag
 EXPORT_SYMBOL(inet_frag_create);
 
 /* TODO : call from rcu_read_lock() and no longer use refcount_inc_not_zero() */
-struct inet_frag_queue *inet_frag_find(struct netns_frags *nf, void *key)
+struct inet_frag_queue *inet_frag_find(struct netns_frags *nf,
+				       struct netns_frags_ext *nf_ext,
+				       void *key)
 {
 	struct inet_frag_queue *fq = NULL, *prev;
 
 	rcu_read_lock();
-	prev = rhashtable_lookup(&nf->rhashtable, key, nf->f->rhash_params);
+	prev = rhashtable_lookup(&nf_ext->rhashtable, key,
+			         nf_ext->f->rhash_params);
 	if (!prev)
-		fq = inet_frag_create(nf, key, &prev);
+		fq = inet_frag_create(nf, nf_ext, key, &prev);
 	if (prev && !IS_ERR(prev)) {
 		fq = prev;
 		if (!atomic_inc_not_zero(&fq->refcnt))
--- a/net/ieee802154/6lowpan/reassembly.c
+++ b/net/ieee802154/6lowpan/reassembly.c
@@ -82,7 +82,8 @@ fq_find(struct net *net, const struct lo
 	key.src = *src;
 	key.dst = *dst;
 
-	q = inet_frag_find(&ieee802154_lowpan->frags, &key);
+	q = inet_frag_find(&ieee802154_lowpan->frags,
+			   &net->ieee802154_lowpan_frags_ext, &key);
 	if (!q)
 		return NULL;
 
@@ -548,14 +549,16 @@ static int __net_init lowpan_frags_init_
 	ieee802154_lowpan->frags.high_thresh = IPV6_FRAG_HIGH_THRESH;
 	ieee802154_lowpan->frags.low_thresh = IPV6_FRAG_LOW_THRESH;
 	ieee802154_lowpan->frags.timeout = IPV6_FRAG_TIMEOUT;
-	ieee802154_lowpan->frags.f = &lowpan_frags;
+	net->ieee802154_lowpan_frags_ext.f = &lowpan_frags;
 
-	res = inet_frags_init_net(&ieee802154_lowpan->frags);
+	res = inet_frags_init_net(&ieee802154_lowpan->frags,
+				  &net->ieee802154_lowpan_frags_ext);
 	if (res < 0)
 		return res;
 	res = lowpan_frags_ns_sysctl_register(net);
 	if (res < 0)
-		inet_frags_exit_net(&ieee802154_lowpan->frags);
+		inet_frags_exit_net(&ieee802154_lowpan->frags,
+				    &net->ieee802154_lowpan_frags_ext);
 	return res;
 }
 
@@ -565,7 +568,8 @@ static void __net_exit lowpan_frags_exit
 		net_ieee802154_lowpan(net);
 
 	lowpan_frags_ns_sysctl_unregister(net);
-	inet_frags_exit_net(&ieee802154_lowpan->frags);
+	inet_frags_exit_net(&ieee802154_lowpan->frags,
+			    &net->ieee802154_lowpan_frags_ext);
 }
 
 static struct pernet_operations lowpan_frags_ops = {
--- a/net/ipv4/ip_fragment.c
+++ b/net/ipv4/ip_fragment.c
@@ -279,7 +279,7 @@ static struct ipq *ip_find(struct net *n
 	};
 	struct inet_frag_queue *q;
 
-	q = inet_frag_find(&net->ipv4.frags, &key);
+	q = inet_frag_find(&net->ipv4.frags, &net->ipv4_frags_ext, &key);
 	if (!q)
 		return NULL;
 
@@ -900,21 +900,21 @@ static int __net_init ipv4_frags_init_ne
 	net->ipv4.frags.timeout = IP_FRAG_TIME;
 
 	net->ipv4.frags.max_dist = 64;
-	net->ipv4.frags.f = &ip4_frags;
+	net->ipv4_frags_ext.f = &ip4_frags;
 
-	res = inet_frags_init_net(&net->ipv4.frags);
+	res = inet_frags_init_net(&net->ipv4.frags, &net->ipv4_frags_ext);
 	if (res < 0)
 		return res;
 	res = ip4_frags_ns_ctl_register(net);
 	if (res < 0)
-		inet_frags_exit_net(&net->ipv4.frags);
+		inet_frags_exit_net(&net->ipv4.frags, &net->ipv4_frags_ext);
 	return res;
 }
 
 static void __net_exit ipv4_frags_exit_net(struct net *net)
 {
 	ip4_frags_ns_ctl_unregister(net);
-	inet_frags_exit_net(&net->ipv4.frags);
+	inet_frags_exit_net(&net->ipv4.frags, &net->ipv4_frags_ext);
 }
 
 static struct pernet_operations ip4_frags_ops = {
--- a/net/ipv6/netfilter/nf_conntrack_reasm.c
+++ b/net/ipv6/netfilter/nf_conntrack_reasm.c
@@ -176,7 +176,7 @@ static struct frag_queue *fq_find(struct
 	};
 	struct inet_frag_queue *q;
 
-	q = inet_frag_find(&net->nf_frag.frags, &key);
+	q = inet_frag_find(&net->nf_frag.frags, &net->nf_frag_frags_ext, &key);
 	if (!q)
 		return NULL;
 
@@ -614,21 +614,22 @@ static int nf_ct_net_init(struct net *ne
 	net->nf_frag.frags.high_thresh = IPV6_FRAG_HIGH_THRESH;
 	net->nf_frag.frags.low_thresh = IPV6_FRAG_LOW_THRESH;
 	net->nf_frag.frags.timeout = IPV6_FRAG_TIMEOUT;
-	net->nf_frag.frags.f = &nf_frags;
+	net->nf_frag_frags_ext.f = &nf_frags;
 
-	res = inet_frags_init_net(&net->nf_frag.frags);
+	res = inet_frags_init_net(&net->nf_frag.frags, &net->nf_frag_frags_ext);
 	if (res < 0)
 		return res;
 	res = nf_ct_frag6_sysctl_register(net);
 	if (res < 0)
-		inet_frags_exit_net(&net->nf_frag.frags);
+		inet_frags_exit_net(&net->nf_frag.frags,
+				    &net->nf_frag_frags_ext);
 	return res;
 }
 
 static void nf_ct_net_exit(struct net *net)
 {
 	nf_ct_frags6_sysctl_unregister(net);
-	inet_frags_exit_net(&net->nf_frag.frags);
+	inet_frags_exit_net(&net->nf_frag.frags, &net->nf_frag_frags_ext);
 }
 
 static struct pernet_operations nf_ct_net_ops = {
--- a/net/ipv6/reassembly.c
+++ b/net/ipv6/reassembly.c
@@ -161,7 +161,7 @@ fq_find(struct net *net, __be32 id, cons
 					    IPV6_ADDR_LINKLOCAL)))
 		key.iif = 0;
 
-	q = inet_frag_find(&net->ipv6.frags, &key);
+	q = inet_frag_find(&net->ipv6.frags, &net->ipv6_frags_ext, &key);
 	if (!q)
 		return NULL;
 
@@ -679,22 +679,22 @@ static int __net_init ipv6_frags_init_ne
 	net->ipv6.frags.high_thresh = IPV6_FRAG_HIGH_THRESH;
 	net->ipv6.frags.low_thresh = IPV6_FRAG_LOW_THRESH;
 	net->ipv6.frags.timeout = IPV6_FRAG_TIMEOUT;
-	net->ipv6.frags.f = &ip6_frags;
+	net->ipv6_frags_ext.f = &ip6_frags;
 
-	res = inet_frags_init_net(&net->ipv6.frags);
+	res = inet_frags_init_net(&net->ipv6.frags, &net->ipv6_frags_ext);
 	if (res < 0)
 		return res;
 
 	res = ip6_frags_ns_sysctl_register(net);
 	if (res < 0)
-		inet_frags_exit_net(&net->ipv6.frags);
+		inet_frags_exit_net(&net->ipv6.frags, &net->ipv6_frags_ext);
 	return res;
 }
 
 static void __net_exit ipv6_frags_exit_net(struct net *net)
 {
 	ip6_frags_ns_sysctl_unregister(net);
-	inet_frags_exit_net(&net->ipv6.frags);
+	inet_frags_exit_net(&net->ipv6.frags, &net->ipv6_frags_ext);
 }
 
 static struct pernet_operations ip6_frags_ops = {
--- a/net/ipv4/proc.c
+++ b/net/ipv4/proc.c
@@ -74,7 +74,7 @@ static int sockstat_seq_show(struct seq_
 	seq_printf(seq, "RAW: inuse %d\n",
 		   sock_prot_inuse_get(net, &raw_prot));
 	seq_printf(seq,  "FRAG: inuse %u memory %u\n",
-		   atomic_read(&net->ipv4.frags.rhashtable.nelems),
+		   atomic_read(&net->ipv4_frags_ext.rhashtable.nelems),
 		   frag_mem_limit(&net->ipv4.frags));
 	return 0;
 }
--- a/net/ipv6/proc.c
+++ b/net/ipv6/proc.c
@@ -48,7 +48,7 @@ static int sockstat6_seq_show(struct seq
 	seq_printf(seq, "RAW6: inuse %d\n",
 		       sock_prot_inuse_get(net, &rawv6_prot));
 	seq_printf(seq, "FRAG6: inuse %u memory %u\n",
-		   atomic_read(&net->ipv6.frags.rhashtable.nelems),
+		   atomic_read(&net->ipv6_frags_ext.rhashtable.nelems),
 		   frag_mem_limit(&net->ipv6.frags));
 	return 0;
 }
